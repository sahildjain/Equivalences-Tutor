\documentclass{report}
\usepackage{a4, fullpage}
\usepackage{graphicx}
\linespread{1.3}
\begin{document}

%-------------------------------------------------------------------------------
% TITLE PAGE
%-------------------------------------------------------------------------------

\begin{titlepage}
\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}
\center
\textsc{\LARGE Imperial College London} \\[0.5cm]
\textsc{\Large Department of Computing} \\[0.5cm]
\textsc{\large Third Year Individual Project} \\[1.5cm]
\HRule \\[0.3cm]
{\huge \bfseries Equivalences Tutor} \\[0.3cm]
\HRule \\[1.5cm]

% author and supervisors
\begin{minipage}{0.4\textwidth}
\begin{flushleft} \large \emph{Author:} \\
Sahil \textsc{Jain}
\end{flushleft}
\end{minipage}~
\begin{minipage}{0.4\textwidth}
\begin{flushright} \large \emph{Supervisor:} \\
Fariba \textsc{Sadri}
\end{flushright}
\begin{flushright} \large \emph{Second marker:} \\
Ian \textsc{Hodkinson}
\end{flushright}
\end{minipage}\\[4cm]
{\large \today}\\[3cm]
\vfill
\end{titlepage}

%-------------------------------------------------------------------------------
% ABSTRACT
%-------------------------------------------------------------------------------

\begin{abstract}
% TODO
\end{abstract}


%-------------------------------------------------------------------------------
% ACKNOWLEDGEMENTS
%-------------------------------------------------------------------------------

\subsection*{\centering Acknowledgements}

%-------------------------------------------------------------------------------
% TABLE OF CONTENTS
%-------------------------------------------------------------------------------

\tableofcontents

%-------------------------------------------------------------------------------
% INTRODUCTION
%-------------------------------------------------------------------------------

\chapter{Introduction}
% what is the project about
% what did I set out to achieve, relevance, importance, difficulty
% key aspects, non-technical

\emph{Logic} refers to the study of different modes of reasoning conducted or 
assessed according to strict principles of validity. Due to Logic being one of 
the most fundamental aspects of Computer Science, it is taught to every student
pursuing a Computing degree at Imperial College London. During the first term 
in university, every Computing student is taught the Logic course, which aims to
provide the students with knowledge of the syntax and semantics of Propositional 
and Predicate logic. Students can apply this knowledge to complete equivalences
and natural deduction proofs.

A logical system is made up of three things:

\begin{enumerate}
  \item Syntax - this is the formal language specified to express different
         concepts.
  \item Semantics - this is what provides meaning to the language.
  \item Proof theory - this is a way of arguing in the language. This allows us
         to identify valid statements in the language.
\end{enumerate}

In logic, two statements are logically equivalent if they contain the same
logical content. Mendelson stated that "two statements are equivalent if they
have the same truth value in every model." This can be illustrated in the 
following example: \\ \bigskip 
Statement 1: \emph{If Sahil is a final year student, 
then he has to do an individual project} \\ \bigskip 
Statement 2: \emph{If Sahil is not 
doing an individual project, then he is not a final year student} \\ \bigskip 
As we can see, both statements have the same result in same models. When two logic 
statements are equivalent, they can be derived by each other, with the use of 
equivalences which we know to be true.


%-------------------------------------------------------------------------------
% BACKGROUND
%-------------------------------------------------------------------------------

\chapter{Background} % 10-20 pages

This section summarises the necessary background knowledge for understanding
this report. It also introduces the concepts of Logic Equivalences.

\section{Propositional Logic}
Before we can define what Propositional Logic is, we have to define what a 
proposition is. Essentially, a proposition is a statement which is either
true or false. This then leads to defining Propositonal Logic as a branch of
symbolic logic dealing with propositions as units and with their combinations
and the connectives that relate them. [1]

\subsection{Syntax}
This is the formal language used in propositional logic. There are three different
parts which make up the syntax of propositional logic; atoms, connectives and
punctuation.

A propositional atom, or propositional variable, is a symbol which has a truth
value, either true or false. Usually, atoms are denoted by letters p, q, r, s, etc.

Connectives are boolean operations which are applied to atoms. There are a total
of seven connectives:

\begin{itemize}
	\item And - written as $\land$. Takes two arguments.
	\item Or - written as $\lor$. Takes two arguments.
	\item Not - written as $\neg$. Takes one argument.
	\item If then - written as $\to$. Takes two arguments.
	\item If and only if - written as $\leftrightarrow$. Takes two arguments.
	\item Truth - written as $\top$. Takes zero arguments.
	\item Falsity - written as $\bot$. Takes zero arguments.
\end{itemize}

\subsection{Semantics}
This is the meaning of a logic formula. As each atom has a truth value, there can
be several combinations of truth values for each atom. To be more specific, if there
are n atoms in a logic formula, then there are a total of $2 ^ n$ combinations of
truth values. Each combination is known as a situation.

Each connective has a different meaning. These meanings can be shown using a truth
table and using the atoms p and q. 

\subsubsection{And}

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    p & q & p $\land$ q \\ \hline
    0 & 0 & 0 \\
    0 & 1 & 0 \\
    1 & 0 & 0 \\
    1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

As we can see, p $\land$ q is only true when both p and q are true. Otherwise,
p $\land$ q is always false.

\subsubsection{Or}

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    p & q & p $\lor$ q \\ \hline
    0 & 0 & 0 \\
    0 & 1 & 1 \\
    1 & 0 & 1 \\
    1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

As we can see, p $\lor$ q is true when either p or q is true. When both p and q
are false, p $\lor$ q is false as well.

\subsubsection{Not}

\begin{center}
  \begin{tabular}{| c | c |}
    \hline
    p & $\neg$p \\ \hline
    0 & 1 \\
    1 & 0 \\ \hline
  \end{tabular}
\end{center}

The truth value of $\neg$p is always the opposite of p.

\subsubsection{If Then}

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    p & q & p $\to$ q \\ \hline
    0 & 0 & 1 \\
    0 & 1 & 1 \\
    1 & 0 & 0 \\
    1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

p $\to$ q is true if p is false or/and if q is true. This means that there is
only one situation where p $\to$ q is false, i.e p is true and q is false. 

\subsubsection{If and Only If}

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    p & q & p $\leftrightarrow$ q \\ \hline
    0 & 0 & 1 \\
    0 & 1 & 0 \\
    1 & 0 & 0 \\
    1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

p $\leftrightarrow$ q is true if p and q both have the same truth value.

\subsubsection{Truth and Falsity}
Truth is an atom which is always true, and Falsity is an atom which is always false.

\section{Equivalences}
As we introduced the example of "\emph{If Sahil is a final year student, 
then he has to do an individual project}" being the same as "\emph{If Sahil is not 
doing an individual project, then he is not a final year student}", all logic
formulae are equivalent to other logic formulae.

We can show this by converting the above example into propositional logic. If we let
the atom \emph{p} denote "\emph{Sahil is a final year student}" and let the atom \emph{q}
denote "\emph{Sahil is doing an individual project}", then the statement "\emph{If Sahil 
is a final year student, then he has to do an individual project}" becomes p $\to$ q
and the statement "\emph{If Sahil is not doing an individual project, then he is 
not a final year student}" becomes $\neg$q $\to$ $\neg$p.

If we construct the truth tables of both of these formulae, we get:

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    p & q & p $\to$ q \\ \hline
    0 & 0 & 1 \\
    0 & 1 & 1 \\
    1 & 0 & 0 \\
    1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    p & q & $\neg$q $\to$ $\neg$p \\ \hline
    0 & 0 & 1 \\
    0 & 1 & 1 \\
    1 & 0 & 0 \\
    1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

As we can see, both of the truth tables are the same. This means that in any given
situation, both of the logic formulae have the same truth value, meaning that they
are equivalent.

There are several defined equivalences for each operator.

\subsection{And Equivalences}
\begin{enumerate}

  \item A $\land$ B $\equiv$ B $\land$ A \emph{(Commutativity of And)}
  \item A $\land$ A $\equiv$ A \emph{(Idempotence of And)}
  \item (A $\land$ B) $\land$ C $\equiv$ A $\land$ (B $\land$ C) \emph{(Associaticity of And)}

\end{enumerate}

\subsection{Or Equivalences}
\begin{enumerate}

  \item A $\lor$ B $\equiv$ B $\lor$ A \emph{(Commutativity of Or)}
	\item A $\lor$ A $\equiv$ A \emph{(Idempotence of Or)}
  \item (A $\lor$ B) $\lor$ C $\equiv$ A $\lor$ (B $\lor$ C) \emph{(Associaticity of Or)}

\end{enumerate}

\subsection{Not Equivalences}
\begin{enumerate}

  \item A $\equiv$ $\neg$$\neg$A

\end{enumerate}

\subsection{Implies Equivalences}
\begin{enumerate}

  \item A $\to$ B $\equiv$ $\neg$A $\lor$ B
  \item A $\to$ B $\equiv$ $\neg$(A $\land$ $\neg$B)
  \item $\neg$(A $\to$ B) $\equiv$ A $\land$ $\neg$B

\end{enumerate}

\subsection{If and Only If Equivalences}
\begin{enumerate}

  \item A $\leftrightarrow$ B $\equiv$ (A $\to$ B) $\land$ (B $\to$ A)
  \item A $\leftrightarrow$ B $\equiv$ (A $\land$ B) $\lor$ ($\neg$A $\land$ $\neg$B)

\end{enumerate}

\subsection{De Morgan Equivalences}

\begin{enumerate}

  \item $\neg$(A $\land$ B) $\equiv$ $\neg$A $\lor$ $\neg$B
  \item $\neg$(A $\lor$ B) $\equiv$ $\neg$A $\land$ $\neg$B

\end{enumerate}

\subsection{Distributibivity of And and Or}
\begin{enumerate}

  \item A $\land$ (B $\lor$ C) $\equiv$ (A $\land$ B) $\lor$ (A $\land$ C)
  \item A $\lor$ (B $\land$ C) $\equiv$ (A $\lor$ B) $\land$ (A $\lor$ C)

\end{enumerate}

\section{Examples of Equivalence Problems}

\subsection{Equivalence Examples}
\begin{enumerate}

  \item $\neg$(p $\to$ q) $\equiv$ p $\land$ $\neg$q
  \begin{enumerate}
    \item $\neg$(p $\to$ q)
    \item $\neg$($\neg$p $\lor$ q) \hfill a, Implication rule
    \item $\neg$$\neg$p $\land$ $\neg$q \hfill b, De Morgan's law
    \item p $\land$ $\neg$q \hfill c, Double Negation rule
  \end{enumerate}
  
  \item $\neg$((p $\land$ q) $\to$ r) $\equiv$ (p $\land$ q) $\land$ $\neg$r
  \begin{enumerate}
    \item $\neg$((p $\land$ q) $\to$ r)
    \item $\neg$($\neg$(p $\land$ q) $\lor$ r) \hfill a, Implication rule
    \item $\neg$$\neg$(p $\land$ q) $\land$ $\neg$ r \hfill b, De Morgan's law
    \item (p $\land$ q) $\land$ $\neg$r \hfill c, Double Negation rule
  \end{enumerate}

  \item $\neg$(p $\lor$ $\neg$q) $\lor$ ($\neg$p $\land$ $\neg$q) $\equiv$ $\neg$p
  \begin{enumerate}
    \item $\neg$(p $\lor$ $\neg$q) $\lor$ ($\neg$p $\land$ $\neg$q)
    \item $\neg$(p $\lor$ $\neg$q) $\lor$ $\neg$(p $\land$ q) \hfill a, De Morgan's law
    \item $\neg$[(p $\lor$ $\neg$q) $\land$ (p $\land$ q)] \hfill b, De Morgan's law
    \item $\neg$[p $\lor$ ($\neg$q $\land$ q)] \hfill c, Distributivity
    \item $\neg$(p $\lor$ $\bot$) \hfill d, And rule
    \item $\neg$p \hfill e, Or rule
  \end{enumerate}
\end{enumerate}

\section{Current Logic Tutorial Applications}

In the first year Logic course, several different concepts are taught to the students.
Some of the concepts have applications installed on the lab machines which are produced
to help students understand these concepts better. Firstly, there is an application
called \emph{Pandora}, which is a learning support tool designed to guide the
construction of natural deduction proofs. The second application the department
provides is \emph{LOST}, which helps students understand logic semantics better. 

Equivalences is a large part of the Logic course, but currently, there is no
tutorial application which the students can use to understand how to apply
equivalences better, or which provides a user friendly interface for the students 
to use. 

%-------------------------------------------------------------------------------
% MAIN BODY
%-------------------------------------------------------------------------------

\chapter{Approach and Implementation details}

\section{Modelling Logic Formulae}

The first part that had to be implemented was modelling logic formulae so that
they could be manipulated when applying equivalences. In the first year Logic course
taught by Ian Hodkinson, the students are taught the Logic formation tree.

The example given in the first year slides is:
% TODO insert the tree from first year slides

Using this formation tree, we can model logical formulae in a tree structure in
Java by creating our own data structure.

\subsection{Lexer}

The first step in modelling the logical formulae into a tree structure is lexical 
analysis. This is the process of converting a sequence of characters into a sequence
of tokens which can be parsed in the future.

As writing a lexer from scratch would have been very time consuming and tedious,
I researched about the tools which had been developed for generating lexers after
inputting the lexical grammar. The best tool which I came across was ANTLR, as it
provides a very easy to use debugger where you can load the generated code and step
through it. 

\subsubsection{Lexical Grammar}
\begin{verbatim}
lexer grammar LogicLexer;

options {
  language = Java;
}

@header {
  package eqtutor;
}

WHITESPACE:			( '\t' | ' ' | '\r' | '\n' | '\u000C' )+ { $channel = HIDDEN; };

AND	:						'&';
OR	:						'|';
IFTHEN	:				'->';
IFF 	:					'<>';
NOT 	:					'!';

LPAREN  :				'(';
RPAREN  :				')';

ID	:						('A'..'Z'|'a'..'z') ('A'..'Z'|'a'..'z'|'_')*;
\end{verbatim}

\subsection{Parser}

Once the formulae has been tokenised by the lexer, it then has to be parsed. Parsing
is the process where the tokens are used to build a data structure, which is usually
a hierarchical structure. This data structure gives a structural representation
of the input.

ANTLR provides both lexer and parser generators. Due to having the ability of doing both
of these steps using one tool which I had become familiar with, I decided to use the
ANTLR parser generator.


\subsubsection{Parser Grammar}

\begin{verbatim}
parser grammar LogicParser;

options {
  tokenVocab = LogicLexer;
}

@header {
  package eqtutor;

  import java.util.LinkedList;
  import java.util.List;
  import AST.*;
}

@members {
  private boolean hasFoundError = false;

  public void displayRecognitionError(String[] tokenNames, RecognitionException e) {
    hasFoundError = true;
  }

  public boolean hasFoundError() {
    return this.hasFoundError;
  }
}

program returns [AST tree]
  : e = iffexpr {$tree = new AST(new ASTProgramNode($e.node));} EOF
  ;

iffexpr returns [ASTPropositionalNode node]
  : ifthen = ifexpr {$node = $ifthen.node;} 
	  (IFF iff = iffexpr {$node = new ASTIffNode($ifthen.node, $iff.node);})*
  ;
  	
ifexpr returns [ASTPropositionalNode node]
  : or = orexpr {$node = $or.node;} 
		(IFTHEN ifthen = ifexpr {$node = new ASTIfThenNode($or.node, $ifthen.node);})*
  ;

orexpr returns [ASTPropositionalNode node]
  : and = andexpr {$node = $and.node;} 
		(OR or = orexpr {$node = new ASTOrNode($and.node, $or.node);})*
  ;

andexpr returns [ASTPropositionalNode node]
  : not = notexpr {$node = $not.node;} 
		(AND and = andexpr {$node = new ASTAndNode($not.node, $and.node);})*
  ;

notexpr returns [ASTPropositionalNode node]
  : NOT not = notexpr {$node = new ASTNotNode($not.node);}
  | id = identifier {$node = $id.node;}
  ;

identifier returns [ASTPropositionalNode node]
  : ID {$node = new ASTIdentifierNode($ID.text);}
  | LPAREN iffexpr RPAREN {$node = $iffexpr.node;}
  ;
\end{verbatim}

\section{Abstract Syntax Tree}

The Abstract Syntax Tree (AST) is the tree representation of the structure
of the logic expression. Each node of the tree represents either a connective
or an identifier of the logic expression.

ANTLR provided an implementation of the AST as well, but I decided not to use it
since manipulation of the trees provided was tough and confusing. Due to this,
I created my own data structure to store the logic expression.

Once the tree is parsed, we obtain an object of type AST. The tree contains
a node of type ASTProgramNode, which is the highest level of the tree. The ASTProgramNode
node contains an ASTPropositionalNode. ASTPropositionalNode is an abstract class
which contains the abstract methods for all of the propositional operators. The
ASTPropositionalNode class is shown below:

\begin{verbatim}
public abstract class ASTPropositionalNode extends ASTNode {

	/*--Checks if the current node is equal to the input node--*/
	public abstract boolean equals(ASTPropositionalNode node);

	/*--Returns the string representation of the node--*/
	public abstract String toString();

	/*--Returns the string representation of the node which can be parsed--*/
	public abstract String toParserString();

	/*--Returns a tree map of the identifiers in the node--*/
	public abstract TreeMap<String, Integer> numIdentifiers(TreeMap<String, Integer> identifiers);
	
	/*--Returns the value of the node, e.g TRUTH and TRUTH = TRUTH--*/
	public abstract int value(TreeMap<String, Integer> id);

	/*--Creates the JPanel for the node which is used to solve equivalences--*/
	public abstract JPanel createJPanel(NewPersonalEquivalenceListener l, boolean side);
	
	/*--Copy constructor for the node--*/
	public abstract ASTPropositionalNode copy();

}
\end{verbatim}

\section{Logic Expression Generator}

\section{Equivalence Solvers} 

\subsection{Easy Equivalence Solver}

The easy equivalence solver is an interface for solving equivalences where
the student can click on either an identifier or an operator, and then a dialog
opens which shows the student which equivalences can be applied to the clicked
node. 

%TODO add an image of the interface

\subsection{Hard Equivalence Solver}

The hard equivalence solver is an interface for solving equivalences where
the student enters logic expressions into a text field. This expression is
then compared to the previous expression to see if it is logically equivalent,
and to see if only one of the given equivalences has been applied. 

%TODO add an image of the interface



%-------------------------------------------------------------------------------
% EVALUATION
%-------------------------------------------------------------------------------

\chapter{Evaluation}

%-------------------------------------------------------------------------------
% CONCLUSIONS AND FUTURE WORK
%-------------------------------------------------------------------------------

\chapter{Conclusions and Future Work}
\section{Learning outcomes}
\section{Potential improvements}
\section{Potential extensions}

%-------------------------------------------------------------------------------
% BIBLIOGRAPHY
%-------------------------------------------------------------------------------

\begin{thebibliography}{9}
%\bibitem{lamport94}
% Leslie Lamport,
% \emph{\LaTeX: A Document Preparation System}.
% Addison Wesley, Massachusetts,
% 2nd Edition,
% 1994.
\end{thebibliography}

%-------------------------------------------------------------------------------
% APPENDIX
%-------------------------------------------------------------------------------

\appendix
\chapter{Equivalences Truth Tables}
\section{And Equivalences}
\begin{enumerate}

  \item A $\land$ B $\equiv$ B $\land$ A \emph{(Commutativity of And)}

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & A $\land$ B & B $\land$ A \\ \hline
    0 & 0 & 0 & 0 \\
    0 & 1 & 0 & 0 \\
    1 & 0 & 0 & 0 \\
    1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item A $\land$ A $\equiv$ A \emph{(Idempotence of And)}

\begin{center}
  \begin{tabular}{| c | c |}
    \hline
    A & A $\land$ A \\ \hline
    0 & 0 \\
    0 & 0 \\
    1 & 1 \\
    1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item (A $\land$ B) $\land$ C $\equiv$ A $\land$ (B $\land$ C) \emph{(Associaticity of And)}

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & (A $\land$ B) $\land$ C & A $\land$ (B $\land$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 \\
    0 & 1 & 0 & 0 & 0 \\
    0 & 1 & 1 & 0 & 0 \\
    1 & 0 & 0 & 0 & 0 \\
    1 & 0 & 1 & 0 & 0 \\
    1 & 1 & 0 & 0 & 0 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{Or Equivalences}
\begin{enumerate}

  \item A $\lor$ B $\equiv$ B $\lor$ A \emph{(Commutativity of Or)}

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & A $\lor$ B & B $\lor$ A\\ \hline
    0 & 0 & 0 & 0 \\
    0 & 1 & 1 & 1 \\
    1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

\item A $\lor$ A $\equiv$ A \emph{(Idempotence of Or)}

\begin{center}
  \begin{tabular}{| c | c |}
    \hline
    A & A $\lor$ A \\ \hline
    0 & 0 \\
    0 & 0 \\
    1 & 1 \\
    1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item (A $\lor$ B) $\lor$ C $\equiv$ A $\lor$ (B $\lor$ C) \emph{(Associaticity of Or)}

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & (A $\lor$ B) $\lor$ C & A $\lor$ (B $\lor$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 1 & 1 \\
    0 & 1 & 0 & 1 & 1 \\
    0 & 1 & 1 & 1 & 1 \\
    1 & 0 & 0 & 1 & 1 \\
    1 & 0 & 1 & 1 & 1 \\
    1 & 1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{Not Equivalences}
\begin{enumerate}

  \item A $\equiv$ $\neg$$\neg$A

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    A & $\neg$A & $\neg$$\neg$A \\ \hline
    0 & 1 & 0 \\
    1 & 0 & 1 \\ \hline
  \end{tabular}
\end{center}

\end{enumerate}

\section{Implies Equivalences}
\begin{enumerate}

  \item A $\to$ B $\equiv$ $\neg$A $\lor$ B

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & $\neg$A & A $\to$ B & $\neg$A $\lor$ B \\ \hline
    0 & 0 & 1 & 1 & 1 \\
    0 & 1 & 1 & 1 & 1 \\ 
    1 & 0 & 0 & 0 & 0 \\
    1 & 1 & 0 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item A $\to$ B $\equiv$ $\neg$(A $\land$ $\neg$B)

\begin{center}
  \begin{tabular}{| c | c | c | c | c | c |}
    \hline
    A & B & $\neg$B & A $\land$ $\neg$B & A $\to$ B & $\neg$(A $\land$ $\neg$B) \\ \hline
    0 & 0 & 1 & 0 & 1 & 1 \\
    0 & 1 & 0 & 0 & 1 & 1 \\
    1 & 0 & 1 & 1 & 0 & 0 \\
    1 & 1 & 0 & 0 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item $\neg$(A $\to$ B) $\equiv$ A $\land$ $\neg$B

\begin{center}
  \begin{tabular}{| c | c | c | c | c | c |}
    \hline
    A & B & $\neg$B & A $\to$ B & $\neg$(A $\to$ B) & A $\land$ $\neg$B \\ \hline
    0 & 0 & 1 & 1 & 0 & 0 \\
    0 & 1 & 0 & 1 & 0 & 0 \\
    1 & 0 & 1 & 0 & 1 & 1 \\
    1 & 1 & 0 & 1 & 0 & 0 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{If and Only If Equivalences}
\begin{enumerate}

  \item A $\leftrightarrow$ B $\equiv$ (A $\to$ B) $\land$ (B $\to$ A)

\begin{center}
  \begin{tabular} {| c | c | c | c | c | c |}
    \hline
    A & B & A $\to$ B & B $\to$ A & A $\leftrightarrow$ B & (A $\to$ B) $\land$ (B $\to$ A) \\ \hline
    0 & 0 & 1 & 1 & 1 & 1 \\
    0 & 1 & 1 & 0 & 0 & 0 \\
    1 & 0 & 0 & 1 & 0 & 0 \\
    1 & 1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular} 
\end{center}

  \item A $\leftrightarrow$ B $\equiv$ (A $\land$ B) $\lor$ ($\neg$A $\land$ $\neg$B)

\begin{center}
  \begin{tabular} {| c | c | c | c | c | c | c |}
    \hline
    A & B & A $\land$ B & $\neg$A & $\neg$B & A $\leftrightarrow$ B & (A $\land$ B) $\lor$ ($\neg$A $\land$ $\neg$B) \\ \hline
    0 & 0 & 0 & 1 & 1 & 1 & 1 \\
    0 & 1 & 0 & 1 & 0 & 0 & 0 \\
    1 & 0 & 0 & 0 & 1 & 0 & 0 \\
    1 & 1 & 1 & 0 & 0 & 1 & 1 \\ \hline
  \end{tabular} 
\end{center}
\end{enumerate}

\section{De Morgan Equivalences}

\begin{enumerate}

  \item $\neg$(A $\land$ B) $\equiv$ $\neg$A $\lor$ $\neg$B

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & $\neg$(A $\land$ B) & $\neg$A $\lor$ $\neg$B \\ \hline
    0 & 0 & 1 & 1 \\
    0 & 1 & 1 & 1 \\ 
    1 & 0 & 1 & 1 \\
    1 & 1 & 0 & 0 \\ \hline
  \end{tabular}
\end{center}

  \item $\neg$(A $\lor$ B) $\equiv$ $\neg$A $\land$ $\neg$B

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & $\neg$(A $\lor$ B) & $\neg$A $\land$ $\neg$B \\ \hline
    0 & 0 & 1 & 1 \\
    0 & 1 & 0 & 0 \\ 
    1 & 0 & 0 & 0 \\
    1 & 1 & 0 & 0 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{Distributibivity of And and Or}
\begin{enumerate}

  \item A $\land$ (B $\lor$ C) $\equiv$ (A $\land$ B) $\lor$ (A $\land$ C)

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & A $\land$ (B $\lor$ C) & (A $\land$ B) $\lor$ (A $\land$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 \\
    0 & 1 & 0 & 0 & 0 \\
    0 & 1 & 1 & 0 & 0 \\
    1 & 0 & 0 & 0 & 0 \\
    1 & 0 & 1 & 1 & 1 \\
    1 & 1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item A $\lor$ (B $\land$ C) $\equiv$ (A $\lor$ B) $\land$ (A $\lor$ C)

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & A $\lor$ (B $\land$ C) & (A $\lor$ B) $\land$ (A $\lor$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 \\
    0 & 1 & 0 & 0 & 0 \\
    0 & 1 & 1 & 1 & 1 \\
    1 & 0 & 0 & 1 & 1 \\
    1 & 0 & 1 & 1 & 1 \\
    1 & 1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}
\chapter{Truth Tables of all Equivalences}
\section{And Equivalences}
\begin{enumerate}

  \item A $\land$ B $\equiv$ B $\land$ A \emph{(Commutativity of And)}

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & A $\land$ B & B $\land$ A \\ \hline
    0 & 0 & 0 & 0 \\
    0 & 1 & 0 & 0 \\
    1 & 0 & 0 & 0 \\
    1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item A $\land$ A $\equiv$ A \emph{(Idempotence of And)}

\begin{center}
  \begin{tabular}{| c | c |}
    \hline
    A & A $\land$ A \\ \hline
    0 & 0 \\
    0 & 0 \\
    1 & 1 \\
    1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item (A $\land$ B) $\land$ C $\equiv$ A $\land$ (B $\land$ C) \emph{(Associaticity of And)}

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & (A $\land$ B) $\land$ C & A $\land$ (B $\land$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 \\
    0 & 1 & 0 & 0 & 0 \\
    0 & 1 & 1 & 0 & 0 \\
    1 & 0 & 0 & 0 & 0 \\
    1 & 0 & 1 & 0 & 0 \\
    1 & 1 & 0 & 0 & 0 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{Or Equivalences}
\begin{enumerate}

  \item A $\lor$ B $\equiv$ B $\lor$ A \emph{(Commutativity of Or)}

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & A $\lor$ B & B $\lor$ A\\ \hline
    0 & 0 & 0 & 0 \\
    0 & 1 & 1 & 1 \\
    1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

\item A $\lor$ A $\equiv$ A \emph{(Idempotence of Or)}

\begin{center}
  \begin{tabular}{| c | c |}
    \hline
    A & A $\lor$ A \\ \hline
    0 & 0 \\
    0 & 0 \\
    1 & 1 \\
    1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item (A $\lor$ B) $\lor$ C $\equiv$ A $\lor$ (B $\lor$ C) \emph{(Associaticity of Or)}

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & (A $\lor$ B) $\lor$ C & A $\lor$ (B $\lor$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 1 & 1 \\
    0 & 1 & 0 & 1 & 1 \\
    0 & 1 & 1 & 1 & 1 \\
    1 & 0 & 0 & 1 & 1 \\
    1 & 0 & 1 & 1 & 1 \\
    1 & 1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{Not Equivalences}
\begin{enumerate}

  \item A $\equiv$ $\neg$$\neg$A

\begin{center}
  \begin{tabular}{| c | c | c |}
    \hline
    A & $\neg$A & $\neg$$\neg$A \\ \hline
    0 & 1 & 0 \\
    1 & 0 & 1 \\ \hline
  \end{tabular}
\end{center}

\end{enumerate}

\section{Implies Equivalences}
\begin{enumerate}

  \item A $\to$ B $\equiv$ $\neg$A $\lor$ B

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & $\neg$A & A $\to$ B & $\neg$A $\lor$ B \\ \hline
    0 & 0 & 1 & 1 & 1 \\
    0 & 1 & 1 & 1 & 1 \\ 
    1 & 0 & 0 & 0 & 0 \\
    1 & 1 & 0 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item A $\to$ B $\equiv$ $\neg$(A $\land$ $\neg$B)

\begin{center}
  \begin{tabular}{| c | c | c | c | c | c |}
    \hline
    A & B & $\neg$B & A $\land$ $\neg$B & A $\to$ B & $\neg$(A $\land$ $\neg$B) \\ \hline
    0 & 0 & 1 & 0 & 1 & 1 \\
    0 & 1 & 0 & 0 & 1 & 1 \\
    1 & 0 & 1 & 1 & 0 & 0 \\
    1 & 1 & 0 & 0 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item $\neg$(A $\to$ B) $\equiv$ A $\land$ $\neg$B

\begin{center}
  \begin{tabular}{| c | c | c | c | c | c |}
    \hline
    A & B & $\neg$B & A $\to$ B & $\neg$(A $\to$ B) & A $\land$ $\neg$B \\ \hline
    0 & 0 & 1 & 1 & 0 & 0 \\
    0 & 1 & 0 & 1 & 0 & 0 \\
    1 & 0 & 1 & 0 & 1 & 1 \\
    1 & 1 & 0 & 1 & 0 & 0 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{If and Only If Equivalences}
\begin{enumerate}

  \item A $\leftrightarrow$ B $\equiv$ (A $\to$ B) $\land$ (B $\to$ A)

\begin{center}
  \begin{tabular} {| c | c | c | c | c | c |}
    \hline
    A & B & A $\to$ B & B $\to$ A & A $\leftrightarrow$ B & (A $\to$ B) $\land$ (B $\to$ A) \\ \hline
    0 & 0 & 1 & 1 & 1 & 1 \\
    0 & 1 & 1 & 0 & 0 & 0 \\
    1 & 0 & 0 & 1 & 0 & 0 \\
    1 & 1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular} 
\end{center}

  \item A $\leftrightarrow$ B $\equiv$ (A $\land$ B) $\lor$ ($\neg$A $\land$ $\neg$B)

\begin{center}
  \begin{tabular} {| c | c | c | c | c | c | c |}
    \hline
    A & B & A $\land$ B & $\neg$A & $\neg$B & A $\leftrightarrow$ B & (A $\land$ B) $\lor$ ($\neg$A $\land$ $\neg$B) \\ \hline
    0 & 0 & 0 & 1 & 1 & 1 & 1 \\
    0 & 1 & 0 & 1 & 0 & 0 & 0 \\
    1 & 0 & 0 & 0 & 1 & 0 & 0 \\
    1 & 1 & 1 & 0 & 0 & 1 & 1 \\ \hline
  \end{tabular} 
\end{center}
\end{enumerate}

\section{De Morgan Equivalences}

\begin{enumerate}

  \item $\neg$(A $\land$ B) $\equiv$ $\neg$A $\lor$ $\neg$B

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & $\neg$(A $\land$ B) & $\neg$A $\lor$ $\neg$B \\ \hline
    0 & 0 & 1 & 1 \\
    0 & 1 & 1 & 1 \\ 
    1 & 0 & 1 & 1 \\
    1 & 1 & 0 & 0 \\ \hline
  \end{tabular}
\end{center}

  \item $\neg$(A $\lor$ B) $\equiv$ $\neg$A $\land$ $\neg$B

\begin{center}
  \begin{tabular}{| c | c | c | c |}
    \hline
    A & B & $\neg$(A $\lor$ B) & $\neg$A $\land$ $\neg$B \\ \hline
    0 & 0 & 1 & 1 \\
    0 & 1 & 0 & 0 \\ 
    1 & 0 & 0 & 0 \\
    1 & 1 & 0 & 0 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

\section{Distributibivity of And and Or}
\begin{enumerate}

  \item A $\land$ (B $\lor$ C) $\equiv$ (A $\land$ B) $\lor$ (A $\land$ C)

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & A $\land$ (B $\lor$ C) & (A $\land$ B) $\lor$ (A $\land$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 \\
    0 & 1 & 0 & 0 & 0 \\
    0 & 1 & 1 & 0 & 0 \\
    1 & 0 & 0 & 0 & 0 \\
    1 & 0 & 1 & 1 & 1 \\
    1 & 1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}

  \item A $\lor$ (B $\land$ C) $\equiv$ (A $\lor$ B) $\land$ (A $\lor$ C)

\begin{center}
  \begin{tabular}{| c | c | c | c | c |}
    \hline
    A & B & C & A $\lor$ (B $\land$ C) & (A $\lor$ B) $\land$ (A $\lor$ C) \\ \hline
    0 & 0 & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 \\
    0 & 1 & 0 & 0 & 0 \\
    0 & 1 & 1 & 1 & 1 \\
    1 & 0 & 0 & 1 & 1 \\
    1 & 0 & 1 & 1 & 1 \\
    1 & 1 & 0 & 1 & 1 \\
    1 & 1 & 1 & 1 & 1 \\ \hline
  \end{tabular}
\end{center}
\end{enumerate}

%-------------------------------------------------------------------------------

\end{document}
